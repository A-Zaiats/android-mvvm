{
  "name": "Android-mvvm",
  "tagline": "A Model-View-ViewModel library for Android apps",
  "body": "# android-mvvm\r\nA Model-View-ViewModel library for Android apps\r\n\r\n## Features\r\nThis library helps reduce boilerplate code in android applications:\r\n- a useful implementation of Model-View-ViewModel pattern by leveraging the new Android Data Binding.\r\n- automating bind ViewModel with View.\r\n- ViewModel is isolated from Activity/Fragment lifecycle. It's particularly good at surviving configuration changes when Android destroys your Activity and Views and replaces them with new ones.\r\n\r\n## What is MVVM?\r\nModel-View-ViewModel is an architectural approach used to abstract the state and behavior of a view, which allows us to separate the development of the UI from the business logic. This is accomplished by the introduction of a ViewModel, whose responsibility is to expose the data objects of a model and handle any of the applications logic involved in the display of a view.\r\n\r\nThis approach (MVVM) is made up of three core components, each with its own distinct and separate role:\r\n- **Model** - Data model containing business and validation logic\r\n- **View** - Defines the structure, layout and appearance of a view on screen\r\n- **ViewModel** - Acts a link between the View and Model, dealing with any view logic\r\n\r\n## Implementation with android-mvvm library\r\n\r\n1. Install android-mvvm library\r\n```groovy\r\nrepositories {\r\n    maven { url \"https://dl.bintray.com/a-zaiats/maven\" }\r\n}\r\n\r\ndependencies {\r\n    compile \"io.github.azaiats.androidmvvm:androidmvvm-core:$androidmvvm_version\"\r\n    compile \"io.github.azaiats.androidmvvm:androidmvvm-navigation:$androidmvvm_version\" // optional navigation feature\r\n}\r\n```\r\n\r\n2. Enable Data Binding\r\n```groovy\r\nandroid {\r\n    dataBinding {\r\n        enabled = true;\r\n    }\r\n}\r\n```\r\n\r\n3. Create your ViewModel class by extending [BaseViewModel](https://github.com/A-Zaiats/android-mvvm/blob/master/core/src/main/java/io/github/azaiats/androidmvvm/core/common/BaseViewModel.java). For example:\r\n```java\r\npublic class MyViewModel extends BaseViewModel {\r\n  ....\r\n}\r\n```\r\n\r\n4. Each **Activity**, **Fragment** or **DialogFragment** that you would like to associate with a ViewModel will need either to extend [MvvmActivity](https://github.com/A-Zaiats/android-mvvm/blob/master/core/src/main/java/io/github/azaiats/androidmvvm/core/MvvmActivity.java)/[MvvmFragment](https://github.com/A-Zaiats/android-mvvm/blob/master/core/src/main/java/io/github/azaiats/androidmvvm/core/MvvmFragment.java)/[MvvmDialogFragment](https://github.com/A-Zaiats/android-mvvm/blob/master/core/src/main/java/io/github/azaiats/androidmvvm/core/MvvmDialogFragment.java) or copy the implementation from these classes to your base activity/fragment/dialogFragment class (in case you can't inherit directly). Override `createViewModel()` to return the corresponding ViewModel (It can be created by directly or injected via DI). Override `getBindingConfig()` to return the corresponding BindingConfig (will be described later). For example:\r\n```java\r\npublic class MyFragment extends MvvmFragment<FragmentMyBinding, MyViewModel> {\r\n\r\n    @Override\r\n    public MyViewModel createViewModel() {\r\n        return new MyViewModel();\r\n    }\r\n\r\n    @Override\r\n    public BindingConfig getBindingConfig() {\r\n        return new BindingConfig(R.layout.fragment_my, BR.viewModel);\r\n    }\r\n}\r\n```\r\n\r\n## How to use\r\n\r\n#### BindingConfig\r\nBindingConfig represents configuration for DataBinging creation. It contains 2 parameters:\r\n- layout resource ID for this view\r\n- Data Binding variable name for injecting the ViewModel. BindingConfig can be created without viewModelVariableName if the name of the binding is `viewModel`.\r\n\r\n#### ViewModel\r\nViewModel has its own lifecycle:\r\n- Method `onCreate()` will be called on ViewModel creation. This is a place to do any initialisation.\r\n- Method `onDestroy()` will be called before ViewModel destroying. This is a place to do any cleanup.\r\n- Method `onResume()` will be called when this ViewModel was binded to a view and the view is visible.\r\n- Method `onPause()` will be called when this ViewModel was unbinded from a view or view was paused.\r\n- Method `isRunning` tells if Activity/Fragment is in RUNNING state (in between `onResume()` and `onPause()`)\r\n\r\n#### MvvmActivity/MvvmFragment/MvvmDialogFragment\r\nAfter creation you can call `getViewModel()` or `getBinding()` if you want interact with your ViewModel or Binding. Also, if you want to add `Observable.OnPropertyChangedCallback` to your ViewModel's observable field, you can call `addOnPropertyChangedCallback(Observable.OnPropertyChangedCallback callback)`. This callback will be removed on activity/fragment destroy, so you needn't disturb about memory leaks.\r\n\r\n# Navigation\r\n\r\nBy MVVM pattern, ViewModel hasn't reference to View. So ViewModel can't interact with activity/fragment directly. But we need run navigation commands in our ViewModel (e.g. start new Activity or replace Fragment via FragmentManager). To resolve it, you can use some event bus library (e.g. [Otto](http://square.github.io/otto/)), [RxJava](https://github.com/ReactiveX/RxJava), or androidmvvm-navigation extension. There are navigating versions of MvvmActivity/MvvmFragment/MvvmDialogFragment in this extension.\r\n\r\n## How to use\r\n\r\n1. Create your interface that extends [Navigator](https://github.com/A-Zaiats/android-mvvm/blob/master/navigation/src/main/java/io/github/azaiats/androidmvvm/navigation/common/Navigator.java). Add navigation methods to it.\r\n2. Create your ViewModel class by extending [NavigatingViewModel](https://github.com/A-Zaiats/android-mvvm/blob/master/navigation/src/main/java/io/github/azaiats/androidmvvm/navigation/common/NavigatingViewModel.java).\r\n3. Extend your Activity/Fragment/DialogFragment from [NavigatingMvvmActivity](https://github.com/A-Zaiats/android-mvvm/blob/master/navigation/src/main/java/io/github/azaiats/androidmvvm/navigation/NavigatingMvvmActivity.java)/[NavigatingMvvmFragment](https://github.com/A-Zaiats/android-mvvm/blob/master/navigation/src/main/java/io/github/azaiats/androidmvvm/navigation/NavigatingMvvmFragment.java)/[NavigatingMvvmDialogFragment](https://github.com/A-Zaiats/android-mvvm/blob/master/navigation/src/main/java/io/github/azaiats/androidmvvm/navigation/NavigatingMvvmDialogFragment.java) to provide Navigator.\r\n4. Use `navigator` directly from your ViewModel to call it's methods. Note that `navigator` can be `null` if ViewModel is detached from View (e.g. when a screen was rotated). Alternate you can call `executeNavigationCommand(NavigationCommand<T> navigationCommand)`. In this case, a command will be executed immediately if Navigator is attached. Otherwise, it will be saved and executed on Navigator attach.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}