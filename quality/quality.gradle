apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'jacoco'

check.dependsOn 'checkstyle', 'findbugs', 'pmd', 'lint'

task checkstyle(type: Checkstyle, group: 'verification') {
    configFile file("${project.rootDir}/quality/checkstyle/checkstyle.xml")
    configProperties.checkstyleSuppressionsPath = file("${project.rootDir}/quality/checkstyle/suppressions.xml").absolutePath
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    classpath = files()
}

task findbugs(type: FindBugs, dependsOn: assemble, group: 'verification') {
    ignoreFailures = false
    effort = "max"
    reportLevel = "high"
    excludeFilter = new File("${project.rootDir}/quality/findbugs/findbugs-filter.xml")
    classes = files("${project.rootDir}/${project.getName()}/build/intermediates/classes")

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.enabled = false
        html.enabled = true
        xml {
            destination "${project.rootDir}/${project.getName()}/build/reports/findbugs/findbugs.xml"
        }
        html {
            destination "${project.rootDir}/${project.getName()}/build/reports/findbugs/findbugs.html"
        }
    }

    classpath = files()
}

task pmd(type: Pmd, group: 'verification') {
    ignoreFailures = false
    ruleSetFiles = files("${project.rootDir}/quality/pmd/pmd.xml")
    ruleSets = []

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.enabled = false
        html.enabled = true
        xml {
            destination "${project.rootDir}/${project.getName()}/build/reports/pmd/pmd.xml"
        }
        html {
            destination "${project.rootDir}/${project.getName()}/build/reports/pmd/pmd.html"
        }
    }
}

jacoco {
    // Don't update jacoco while bug https://github.com/jacoco/jacoco/pull/288
    toolVersion = "0.7.2.201409121644"
}

def coverageSourceDirs = [
        'src/main/java'
]

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"

    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(
            dir: 'build/intermediates/classes/debug',
            excludes: ['**/R.class',
                       '**/BR.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*',
                       '**/databinding/**',
                       'io/github/azaiats/androidmvvm/core/support/WeakValueHashMap.class',
                       'io/github/azaiats/androidmvvm/core/support/WeakValueHashMap$*.class'

            ]
    )

    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files('build/jacoco/testDebugUnitTest.exec')

    reports {
        xml.enabled = true
        html.enabled = true
    }
}

android {
    lintOptions {
        abortOnError true
        xmlReport false
        htmlReport true
        lintConfig file("${project.rootDir}/quality/lint/lint.xml")
        htmlOutput file("${project.rootDir}/${project.getName()}/build/reports/lint/lint-result.html")
        xmlOutput file("${project.rootDir}/${project.getName()}/build/reports/lint/lint-result.xml")
    }
}